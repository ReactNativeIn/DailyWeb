<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<context:component-scan base-package="com.daily.www" />
	
	
	<!--  파일 업로드에 관련한 설정 -->
	<!-- 스프링프레임워크에 내장된 CommonsMultipartResolver를 등록 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 업로드할 파일의 최대용량(byte단위, 최대용량 초과시 파일 업로드가 안됨) -->
		<property name="maxUploadSize" value="10485740"></property>
	</bean>
	
	<!-- 파일 업로드를 위한 경로 설정 -->
	<!-- String uploadPath = new String("c:/data/upload"); -->
	<bean id="uploadPath" class="java.lang.String">
		<constructor-arg value="c:/Daily"/>
	</bean>
	
	<!-- AOP 설정 -->
	<context:annotation-config></context:annotation-config>
	
	<!-- component-scan을 이용하여 해당 패키지를 스캔하게 된다.
		 이 과정에서 LogAdvice가 스프링의 Bean객체로 등록된다. -->
	<context:component-scan base-package="com.daily.www.common.aop"></context:component-scan>
	
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy>를 이용해서
		 LogAdvice.java에 설정한 @Before등이 동작하게 된다. -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- AOP 실행시 (member 관련 패키지에서 문자가 발생할때)
		 Spring AOP 사용 시 The mapped controller method class 'class' in not an instance of the actual 에러 발생시 -->
	<aop:config proxy-target-class="true"></aop:config>
	
	<!-- 인터셉터 객체 생성 -->
	<!-- LoginInterceptor LoginInterceptor = new LoginInterceptor(); -->
	<bean id="LoginInterceptor" class="com.daily.www.common.interceptor.LoginInterceptor"></bean>
	
	<!-- 인터셉터 설정 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- <mapping path="/**"/> 모든 url에 적용하고 싶을 때 /**를 사용 -->
			<mvc:mapping path="/cart/**"/>
			<mvc:mapping path="/orders/**"/>
			<mvc:mapping path="/board/boardRegisterForm"/>
			<mvc:mapping path="/member/mypage"/>
			<mvc:mapping path="/member/ordersHistory"/>
			<ref bean="LoginInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
</beans>

